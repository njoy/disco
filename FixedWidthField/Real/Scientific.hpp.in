namespace disco {

template< uint16_t w, uint16_t d, uint16_t e >
struct Scientific : public Real< w > {

  using Real = Real< w >;
  using MayConsumeExponent = typename Real::MayConsumeExponent;
  using MayNotConsumeExponent = typename Real::MayNotConsumeExponent;

  using InfinityPrintingPolicy =
    typename utility::TypeSwitch
             < typename Real::Full, typename utility::TypeSwitch
               < typename Real::Partial, typename Real::PartialNegative,
                 ( w < 8 ) >::type, ( w > 8 ) >::type;
  
  using ExponentPolicy =
    typename utility::TypeSwitch
             < MayConsumeExponent, MayNotConsumeExponent,
               e == std::numeric_limits< uint16_t >::max() >::type;

  static constexpr int exponentDigits =
    ( e == std::numeric_limits< uint16_t >::max() ) ? 2 : e;

  template< typename Representation >
  static bool
  isInvalid( Representation real, MayConsumeExponent ){
    return ( int(w) - d - exponentDigits - 3 - ( real < 0 ) ) < 0;
  }

  template< typename Representation >
  static bool
  isInvalid( Representation real, MayNotConsumeExponent ){
    return ( int(w) - d - exponentDigits - 4 - ( real < 0 ) ) < 0;
  }

  using Real::write;
  
#include "disco/FixedWidthField/Real/Scientific/src/write.hpp" 
#include "disco/FixedWidthField/Real/Scientific/src/writeWithoutConsumption.hpp" 
#include "disco/FixedWidthField/Real/Scientific/src/writeWithConsumption.hpp" 
#include "disco/FixedWidthField/Real/Scientific/src/writeInvalid.hpp"
#include "disco/FixedWidthField/Real/Scientific/src/writeZero.hpp"
#include "disco/FixedWidthField/Real/Scientific/src/writeInfinity.hpp"
 
};

}
