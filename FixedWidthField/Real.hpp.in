#include <array>
#include <cctype>
#include <cmath>

namespace disco {

template< uint16_t w >
struct Real : public FixedWidthField< w >{

  /* tag structs */
  struct MayConsumeExponent{};
  struct MayNotConsumeExponent{};
  
  struct Full{};
  struct PartialNegative{};
  struct Partial{};
  
  /* constants */
  static constexpr uint16_t endPosition = w - 1;

  /* convenience typedefs */
  using FixedWidthField = FixedWidthField< w >;

  template< bool trust >
  using TrustTag = typename FixedWidthField:: template TrustTag< trust >;
  
  /* methods */
#include "disco/FixedWidthField/Real/src/read.hpp"
  
  /* helpers */
#include "disco/FixedWidthField/Real/src/parseSign.hpp"
#include "disco/FixedWidthField/Real/src/parseBase.hpp"
#include "disco/FixedWidthField/Real/src/parseFraction.hpp"
#include "disco/FixedWidthField/Real/src/parseExponent.hpp"
#include "disco/FixedWidthField/Real/src/parseInfinity.hpp"

  template< typename Representation >
  static bool
  isNegative( Representation real ){
    return reinterpret_cast< typename mask< Representation >::type&>( real )
      & signMask< Representation >;
  }

  template< typename Representation >
  static typename mask< Representation >::type
  exponentBits( Representation real ){
    typename mask< Representation >::type buffer;
    memcpy(&buffer, &real, sizeof(Representation) );
    return buffer & exponentMask< Representation >;
  }

  template< typename UnsignedInteger >
  static uint16_t
  noDigits( UnsignedInteger mantissa ){
    if ( mantissa < 10ull ){ return 1; };
    if ( mantissa < 100ull ){ return 2; };
    if ( mantissa < 1000ull ){ return 3; };
    if ( mantissa < 10000ull ){ return 4; };
    if ( mantissa < 100000ull ){ return 5; };
    if ( mantissa < 1000000ull ){ return 6; };
    if ( mantissa < 10000000ull ){ return 7; };
    if ( mantissa < 100000000ull ){ return 8; };
    if ( mantissa < 1000000000ull ){ return 9; };
    if ( mantissa < 10000000000ull ){ return 10; };
    if ( mantissa < 100000000000ull ){ return 11; };
    if ( mantissa < 1000000000000ull ){ return 12; };
    if ( mantissa < 10000000000000ull ){ return 13; };
    if ( mantissa < 100000000000000ull ){ return 14; };
    if ( mantissa < 1000000000000000ull ){ return 15; };
    if ( mantissa < 10000000000000000ull ){ return 16; };
    if ( mantissa < 100000000000000000ull ){ return 17; };
    if ( mantissa < 1000000000000000000ull ){ return 18; };
    if ( mantissa < 10000000000000000000ull ){ return 19; };
    throw std::runtime_error("Argument has too many digits");
  }
};

}
