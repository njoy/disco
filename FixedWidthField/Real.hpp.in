#include <array>
#include <cctype>
#include <cmath>

namespace disco {

template< uint16_t w >
struct Real : public FixedWidthField< w >{

  /* tag structs */
  struct MayConsumeExponent{};
  struct MayNotConsumeExponent{};
  
  struct Full{};
  struct PartialNegative{};
  struct Partial{};
  
  /* constants */
  static constexpr uint16_t endPosition = w - 1;

  /* convenience typedefs */
  using FixedWidthField = FixedWidthField< w >;

  template< bool trust >
  using TrustTag = typename FixedWidthField:: template TrustTag< trust >;
  
  /* methods */
#include "disco/FixedWidthField/Real/src/read.hpp"
  
  /* helpers */
#include "disco/FixedWidthField/Real/src/parseSign.hpp"
#include "disco/FixedWidthField/Real/src/parseBase.hpp"
#include "disco/FixedWidthField/Real/src/parseFraction.hpp"
#include "disco/FixedWidthField/Real/src/parseExponent.hpp"
#include "disco/FixedWidthField/Real/src/parseInfinity.hpp"
#include "disco/FixedWidthField/Real/src/noDigits.hpp"

};

}
