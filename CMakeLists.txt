cmake_minimum_required( VERSION 3.2 ) 

if( NOT DEFINED build_type )
    if( VERBOSE )
        message( STATUS "build_type variable not specified")
        message( STATUS "build_type defaulted to debug")
    endif()
    set ( build_type "debug" )
endif()

if( NOT DEFINED disco_build_type )
    if( VERBOSE )
        message( STATUS "disco_build_type not specified")
        message( STATUS "disco_build_type defaulted to value of build_type variable")
    endif()
    set( disco_build_type "${build_type}" )
endif()

if( NOT DEFINED static_libraries )
    if( VERBOSE )
        message( STATUS "static_libraries variable not specified")
        message( STATUS "static_libraries defaulted to FALSE")
    endif()
    set( build_static_libraries FALSE )
else()
    set( build_static_libraries ${static_libraries} )
endif()

project( disco VERSION 0.0.1 LANGUAGES CXX )

if( NOT DEFINED is_subproject )
    set( is_subproject )
    add_subdirectory( subprojects/catch-adapter )
    unset( is_subproject )
endif()

if( NOT DEFINED is_subproject )
    if( DEFINED CXX_compiler_flags )
        if( ( NOT DEFINED disco_compiler_flags ) AND ( NOT DEFINED disco_use_default_compiler_flags ) )
            set( disco_compiler_flags "${CXX_compiler_flags}" )
        endif()
    endif()
    if( NOT DEFINED disco_compiler_flags )
        if( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
            if( disco_build_type STREQUAL "debug" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( disco_build_type STREQUAL "coverage" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( disco_build_type STREQUAL "release" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            elseif( disco_build_type STREQUAL "native" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" )
            if( disco_build_type STREQUAL "debug" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( disco_build_type STREQUAL "coverage" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( disco_build_type STREQUAL "release" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            elseif( disco_build_type STREQUAL "native" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            endif()
        elseif( CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" )
            if( disco_build_type STREQUAL "debug" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3" )
            elseif( disco_build_type STREQUAL "coverage" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -g -gdwarf-3 -fprofile-arcs -ftest-coverage -fno-inline" )
            elseif( disco_build_type STREQUAL "release" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            elseif( disco_build_type STREQUAL "native" )
                set( disco_compiler_flags "-std=c++14 -Wall -Wextra -Wpedantic -Werror -O3 -DNDEBUG -march=native" )
                if( NOT no_link_time_optimization )
                    set( disco_compiler_flags "${disco_compiler_flags} -flto" )
                endif()
            endif()
        else()
            message( WARNING "Compiler vendor not recognized. No compilation flags set" )
        endif()
    endif()
    if( DEFINED appended_flags AND NOT disco_no_appended_flags )
        set( disco_compiler_flags "${disco_compiler_flags} ${appended_flags}" )
    endif()
    if( DEFINED disco_appended_flags )
        set( disco_compiler_flags "${disco_compiler_flags} ${disco_appended_flags}" )
    endif()
endif()

execute_process(
    COMMAND git rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
execute_process(
    COMMAND git rev-parse HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE GIT_HASH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

message( STATUS "" )
message( STATUS "-----------------------------------------------------------" )
message( STATUS "" )
message( STATUS "disco Version: 0.0.1" )
message( STATUS "Git current branch: ${GIT_BRANCH}" )
message( STATUS "Git commit hash: ${GIT_HASH}" )
message( STATUS "" )
if( NOT DEFINED is_subproject ) 
    message( STATUS "disco flags: ${disco_compiler_flags}" ) 
    message( STATUS "" ) 
endif() 
message( STATUS "-----------------------------------------------------------" ) 
message( STATUS "" ) 

add_library( disco INTERFACE )
target_include_directories( disco INTERFACE src )
target_link_libraries( disco INTERFACE catch-adapter ) 

if( NOT DEFINED is_subproject ) 
    enable_testing() 
    add_subdirectory( src/disco/Record/test ) 
    add_subdirectory( src/disco/FixedWidthField/Real/FixedPoint/test ) 
    add_subdirectory( src/disco/FixedWidthField/ColumnPosition/test ) 
    add_subdirectory( src/disco/FixedWidthField/Character/test ) 
    add_subdirectory( src/disco/FixedWidthField/Real/Scientific/test ) 
    add_subdirectory( src/disco/FixedWidthField/Real/test ) 
    add_subdirectory( src/disco/FixedWidthField/Real/ENDF/test ) 
    add_subdirectory( src/disco/FixedWidthField/Integer/test ) 
endif() 
